@page "/sales/Create"
@page "/sales/Edit/{id:guid?}/{customerno:long?}"
@inject IDataServices<Customer> custDataServices
@inject IDataServices<Sale> saleDataServices
@inject IDataServices<Product> productServices
@inject NavigationManager navigator
<div class="row">
    <div class="col-6">
        <button type="button" class="btn btn-outline-primary">Previous</button>
    </div>
    <div class="col-6">
        <button type="button" style="float:right;" class="btn btn-outline-primary">Next</button>
    </div>
</div>
<div class="card">
    <EditForm Model="@model" OnValidSubmit="@OnSumbited">
        <div class="card-header">
            <div class="col-6">
                <button class="btn btn-primary " type="submit"> Submit</button>
                <a href="sales" type="button" class="btn btn-info">
                    List
                </a>
            </div>

        </div>
        <div class="card-body">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="row">
                <div class="col-xxl-6 col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 ">
                    <div class="form-floating mb-3">
                        <InputDate placeholder="SaleDateTime" class="form-control" @bind-Value="model.SaleDateTime"></InputDate>
                        <label for="SaleDateTime">DateTime</label>
                        <ValidationMessage For="()=>model.SaleDateTime"></ValidationMessage>
                    </div>
                </div>
                <div class="col-xxl-6 col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 ">
                    <div class="form-floating mb-3">
                        <InputSelect placeholder="CustomerId"  class="form-control" @bind-Value="model.CustomerId">
                            <option value="@Guid.Empty"> -- None Select --
                            </option>
                            @foreach (var item in customers)
                            {
                                <option value="@item.Id">
                                    @($"{item.FirstName} {item.LastName} - No {item.SequenceNo}")
                                </option>
                            }
                        </InputSelect>
                        <label for="CustomerId">Customer Name</label>
                        <ValidationMessage For="()=>model.CustomerId"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="row">
                <table>
                    <thead>
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                                Qauntity
                            </th>
                            <th>
                                Rate
                            </th>
                            <th>
                                Discount Amt.
                            </th>
                            <th>
                                Amount
                            </th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div class="card-footer"></div>
    </EditForm>
</div>


@code {
    [Parameter]
    public Guid id { get; set; }

    [Parameter]
    public long customerno { get; set; }

    public Sale model { get; set; } = new Sale();

    private List<Customer> customers { get; set; } = new List<Customer>();

    protected override async Task OnInitializedAsync()
    {
        if (id != Guid.Empty)
        {
            var sale = await saleDataServices.Get(new DataParams("",id));
            if (sale.Result != null)
            {
                model = sale.Result;
            }
        }
        else if (customerno > 0)
        {

        }
        var cust = await custDataServices.GetAll();
        if (cust.Result != null)
        {
            customers = cust.Result.ToList();
        }
        
    }

    protected async Task OnSumbited()
    {
        if (id != Guid.Empty)
        {
            var res = await saleDataServices.Put(model);
            if (res != null)
            {
                if (res.IsSuccessStatusCode)
                {
                    toaster.ShowToaster("Saved Successfully", ToastLevel.Success);
                    navigator.NavigateTo("/Sales");
                }
            }
        }
        else
        {
            var res = await saleDataServices.Post(model);
            if (res != null)
            {
                if (res.IsSuccessStatusCode)
                {
                    toaster.ShowToaster("Saved Successfully", ToastLevel.Success);
                    navigator.NavigateTo("/Sales");
                }
            }
        }
    }
}
